name: Customer Container Deploy
on:
  workflow_call:
    inputs:
      CUSTOMER-CONTAINER-NAME:
        required: true
        type: string
      CUSTOMER-ENV-NAME:
        required: true
        type: string
      VNET-NAME:
        required: true
        type: string
      SUBNET-NAME:
        required: true
        type: string
jobs:
    
    customer:
   
      runs-on: ubuntu-latest

      steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - uses: Azure/get-keyvault-secrets@v1
        with: 
          keyvault: "containerappsvault"
          secrets: 'SERVICE-PRINCIPAL-ID, SERVICE-PRINCIPAL-PASSWORD'
        id: myAppsBuildSecrets
        
      - name: Verify secrets value
        env:
          SERVICE-PRINCIPAL-ID-ENV: ${{ steps.myAppsBuildSecrets.outputs.SERVICE-PRINCIPAL-ID }}
          SERVICE-PRINCIPAL-PASSWORD-ENV: ${{ steps.myAppsBuildSecrets.outputs.SERVICE-PRINCIPAL-PASSWORD }}
          RG_NAME-ENV: ${{ secrets.RG_NAME }}
          ACR_NAME-IMAGE-ENV: ${{ secrets.ACR_NAME }}.azurecr.io/webapp:latest
          ACR_NAME-SERVER-ENV: ${{ secrets.ACR_NAME }}.azurecr.io
        run: |
          echo ${{env.SERVICE-PRINCIPAL-ID-ENV}} | sed 's/./& /g'
          echo ${{env.SERVICE-PRINCIPAL-PASSWORD-ENV}} | sed 's/./& /g'
          echo ${{env.RG_NAME-ENV}} | sed 's/./& /g'
          echo ${{env.ACR_NAME-IMAGE-ENV}} | sed 's/./& /g'
          echo ${{env.ACR_NAME-SERVER-ENV}} | sed 's/./& /g'

      - name: Deploy to containerapp
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az config set extension.use_dynamic_install=yes_without_prompt
            echo "Cleanup Container Apps Env, SUBNET, VNET"
            az containerapp env delete -n ${{  inputs.CUSTOMER-ENV-NAME }} -g ${{ secrets.RG_NAME }} --yes -y
            az network vnet subnet delete --name ${{  inputs.SUBNET-NAME }} --resource-group ${{ secrets.RG_NAME }} --vnet-name ${{  inputs.VNET-NAME }}
            echo "Create new instances"
            az network vnet create --resource-group ${{ secrets.RG_NAME }} --name ${{  inputs.VNET-NAME }} --location ${{  secrets.RG_LOCATION }} --address-prefix 10.0.0.0/16
            az network vnet subnet create --resource-group ${{ secrets.RG_NAME }} --vnet-name ${{  inputs.VNET-NAME }} --name ${{  inputs.SUBNET-NAME }} --address-prefixes 10.0.0.0/21
            INFRASTRUCTURE_SUBNET_ID=$(az network vnet subnet show --resource-group ${{ secrets.RG_NAME }} --vnet-name infrastructure-vnet --name infrastructure-subnet --query "id" -o tsv | tr -d '[:space:]')
            echo "Subnet-id" $INFRASTRUCTURE_SUBNET_ID
            az containerapp env create --name ${{inputs.CUSTOMER-ENV-NAME}} --resource-group ${{env.RG_NAME-ENV}} --location ${{secrets.RG_LOCATION}} --infrastructure-subnet-resource-id $INFRASTRUCTURE_SUBNET_ID --internal-only
            az config set extension.use_dynamic_install=yes_without_prompt
            az containerapp create --name ${{inputs.CUSTOMER-CONTAINER-NAME}} --resource-group ${{env.RG_NAME-ENV}} --environment ${{inputs.CUSTOMER-ENV-NAME}} --image ${{env.ACR_NAME-IMAGE-ENV}} --registry-server ${{env.ACR_NAME-SERVER-ENV}} --registry-username ${{env.SERVICE-PRINCIPAL-ID-ENV}} --registry-password ${{env.SERVICE-PRINCIPAL-PASSWORD-ENV}} --target-port 80 --ingress external --query properties.configuration.ingress.fqdn
